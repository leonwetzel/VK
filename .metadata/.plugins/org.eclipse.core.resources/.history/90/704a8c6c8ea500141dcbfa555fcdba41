import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.util.HashMap;

import javax.swing.JComponent;
import javax.swing.JFrame;

/**
 * Class for displaying simulation data in a pie chart
 * 
 * Special thanks go out to nraj of Stack Overflow
 * http://stackoverflow.com/questions/13662984/creating-pie-charts-programmatically
 * 
 * @author leonwetzel
 *
 */
public class CirkelDiagram extends JComponent {
	
	FieldStats stats = new FieldStats();
	HashMap<Class, Counter> counters = stats.getCounters();
    for(Class key : counters.keySet()) {
        Counter info = counters.get(key);
        info.getCount();
        if(Counter instanceof Fox) {
        	System.out.println("Dit is een vos.");
        } else if(Counter instanceof Rabbit) {
        	System.out.println("Dit is een konijn.");
        } else if(Counter instanceof Pinguin) {
        	System.out.println("Dit is een pinguin.");
        } else if(Counter instanceof Hunter) {
        	System.out.println("Dit is een jager.");
        }
    }
	
	private int foxCount = 0;
	private int rabbitCount = 0;
	private int pinguinCount = 0;
	private int hunterCount = 0;

	// hoeveelheid actors
	private static final int HOEVEELHEID_ACTORS = 4;
	// 'pizzastukken' van het cirkeldiagram
	private CirkelDeel[] delen = { new CirkelDeel(foxCount, Color.black),
			new CirkelDeel(rabbitCount, Color.green), new CirkelDeel(pinguinCount, Color.yellow),
			new CirkelDeel(hunterCount, Color.red) };

	/**
	 * Constructor
	 */
	CirkelDiagram() {
		CirkelDeel[] delen = new CirkelDeel[HOEVEELHEID_ACTORS];
	}

	/**
	 * Methode om een cirkeldiagram te maken met behulp van het veld 'delen'
	 * @param g
	 */
	public void paint(Graphics g) {
		drawPie((Graphics2D) g, getBounds(), delen);
	}

	/**
	 * Methode om een cirkeldiagram te tekenen
	 * @param g
	 * @param gebied
	 * @param delen
	 */
	public void drawPie(Graphics2D g, Rectangle gebied, CirkelDeel[] delen) {
		double totaal = 0.0D;
		for (int i = 0; i < delen.length; i++) {
			totaal += delen[i].getValue();
		}
		double curValue = 0.0D;
		int startAngle = 0;
		for (int i = 0; i < delen.length; i++) {
			startAngle = (int) (curValue * 360 / totaal);
			int arcAngle = (int) (delen[i].getValue() * 360 / totaal);
			g.setColor(delen[i].getColor());
			g.fillArc(gebied.x, gebied.y, gebied.width, gebied.height, startAngle,
					arcAngle);
			curValue += delen[i].getValue();
		}
	}
}
